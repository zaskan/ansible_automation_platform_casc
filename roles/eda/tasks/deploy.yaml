---
- name: Get variables files
  ansible.builtin.find:
    paths: "{{ eda_vars_dir }}"
  register: variable_files

- name: Include EDA variables
  ansible.builtin.include_vars:
    file: "{{ item.path }}"
  loop: "{{ variable_files.files }}"
  register: included_files

- name: Print included vars files
  ansible.builtin.debug:
    msg: "{{ included_files }}"

- name: Create Custom Credential Types
  ansible.eda.credential_type:
    name: "{{ item.name }}"
    inputs: "{{ item.inputs }}"
    injectors: "{{ item.injectors }}"
    state: present
    validate_certs: false
  loop: "{{ custom_credential_types }}"
  when:
    - custom_credential_types is defined

- name: Create an EDA Credential
  ansible.eda.credential:
    name: "item.name"
    description: "item.description"
    inputs: "{{ item.inputs }}"
    credential_type_name: "{{ item.type }}"
    organization_name: "{{ org | default('Default') }}"
    state: present
    validate_certs: false
  loop: "{{ eda_credentials }}"
  when:
    - eda_credentials is defined

- name: Create User token
  ansible.eda.controller_token:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    token: "{{ generated_controller_token.results[0].ansible_facts.controller_token.token }}"
    state: present
    validate_certs: false
  loop: "{{ eda_tokens }}"
  when:
    - eda_tokens is defined

- name: Create Container Registry Credential
  ansible.eda.credential:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    inputs:
      host: "{{ item.inputs.host }}"
      username: "{{ item.inputs.username }}"
      password: "{{ item.inputs.password }}"
    credential_type_name: "{{ item.type }}"
    organization_name: "{{ org | default('Default') }}"
    state: present
    validate_certs: false
  loop: "{{ eda_credentials }}"
  when:
    - eda_credentials is defined

- name: Create Decision Environments
  ansible.eda.decision_environment:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    image_url: "{{ item.image_url }}"
    credential: "{{ item.credential | default(omit) }}"
    state: present
    organization_name: "{{ org | default('Default') }}"
    validate_certs: false
  loop: "{{ decision_environments }}"
  when:
    - decision_environments is defined

- name: Create Projects
  ansible.eda.project:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    url: "{{ item.url }}"
    state: present
    organization_name: "{{ org | default('Default') }}"
    validate_certs: false
  loop: "{{ eda_projects }}"
  register: project_status
  when:
    - eda_projects is defined
  until: project_status != ""

- name: Create Rulebook Activation
  ansible.eda.rulebook_activation:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    project_name: "{{ item.project }}"
    rulebook_name: "{{ item.rulebook }}"
    decision_environment_name: "{{ item.decision_environment }}"
    extra_vars: "{{ item.extra_vars | default(omit) }}"
    enabled: true
    awx_token_name: "{{ item.awx_token }}"
    state: present
    restart_policy: always
    organization_name: "{{ org | default('Default') }}"
    eda_credentials: "{{ item.credential }}"
    validate_certs: false
  loop: "{{ activations }}"
  when:
    - activations is defined

- name: Create eda users
  ansible.eda.user:
    username: "{{ item.username }}"
    first_name: "{{ item.name | default(omit) }}"
    last_name: "{{ item.last | default(omit) }}"
    email: "{{ item.email | default(omit) }}"
    password: "{{ item.password }}"
    roles: "{{ item.roles  }}"
    state: present
    validate_certs: false
  loop: "{{ eda_users }}"
  when: 
    - eda_users is defined
