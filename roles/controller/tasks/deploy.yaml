---
- name: Get variables files
  ansible.builtin.find:
    paths: "{{ controller_vars_dir }}"
  register: variable_files

- name: Include controller variables
  ansible.builtin.include_vars:
    file: "{{ item.path }}"
  loop: "{{ variable_files.files }}"
  register: included_files

- name: Print included vars files
  ansible.builtin.debug:
    msg: "{{ included_files }}"

- name: Create Organizations
  ansible.platform.organization:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    state: present
  loop: "{{ organizations }}"
  when:
    - organizations is defined

- name: Set Default organization
  ansible.builtin.set_fact:
    default_organization: "{{ item.name }}"
  loop: "{{ organizations }}"
  when:
    - organizations is defined
    - item.default is defined
    - item.default is true

- name: Create Applications
  ansible.controller.application:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    organization: "{{ item.organization }}"
    state: present
    authorization_grant_type: "{{ item.auth_grant_type }}"
    client_type: "{{ item.client_type }}"
  loop: "{{ applications }}"
  when:
    - applications is defined

- name: Create token
  ansible.controller.token:
    description: "{{ item.description }}"
    scope: "{{ item.scope }}"
    state: present
    application: "{{ item.application }}"
  register: generated_controller_token
  loop: "{{ controller_tokens }}"
  when:
    - controller_tokens is defined

- name: Register token
  ansible.builtin.set_fact:
    application_token: "{{ generated_controller_token.results.0.ansible_facts.controller_token.token }}"
  when: 
    - generated_controller_token is defined

- name: Create Teams
  ansible.platform.team:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    organization: "{{ item.org }}"
    state: present
  loop: "{{ teams }}"
  when:
    - teams is defined

- name: Remove Users (Workaround to fix the idempotency of this module in 2.5)
  ansible.platform.user:
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    email: "{{ item.email }}"
    update_secrets: "{{ item.update_secrets }}"
    superuser: "{{ item.superuser }}"
    organizations: "{{ item.organizations }}"
    state: absent
  loop: "{{ users }}"
  when:
    - users is defined

- name: Create Users
  ansible.platform.user:
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    email: "{{ item.email }}"
    update_secrets: "{{ item.update_secrets }}"
    superuser: "{{ item.superuser }}"
    organizations: "{{ item.organizations }}"
    state: present
  loop: "{{ users }}"
  when:
    - users is defined

- name: Create Custom Credential Types
  ansible.controller.credential_type:
    name: "{{ item.name }}"
    kind: "{{ item.kind }}"
    inputs: "{{ item.inputs }}"
    injectors: "{{ item.injectors }}"
    state: present
  loop: "{{ custom_credential_types }}"
  when:
    - custom_credential_types is defined

- name: Create Credentials
  ansible.controller.credential:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    organization: "{{ item.org }}"
    credential_type: "{{ item.type }}"
    update_secrets: true
    inputs: "{{ item.inputs }}"
    state: present
  loop: "{{ controller_credentials }}"
  when:
    - controller_credentials is defined

- name: Create Inventories
  ansible.controller.inventory:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    organization: "{{ item.org }}"
    state: present
    variables: "{{ item.vars | default('{}') }}"
  loop: "{{ inventories }}"
  when:
    - inventories is defined

- name: Create AAP Inventory Sources
  ansible.controller.inventory_source:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    organization: "{{ item.org }}"
    state: present
    inventory: "{{ item.inventory }}"
    source: "{{ item.source }}"
    source_path: "{{ item.source_path }}"
    source_project: "{{ item.project }}"
    credential: "{{ item.credential }}"
  loop: "{{ inventory_sources }}"
  when:
    - inventory_sources is defined

- name: Add hosts
  ansible.controller.host:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    inventory: "{{ item.inv }}"
    variables: "{{ item.vars }}"
    enabled: true
    state: present
  loop: "{{ inventory_hosts }}"
  when:
    - inventory_hosts is defined

- name: Add Execution Enviroment
  ansible.controller.execution_environment:
    name: "{{ item.name }}"
    image: "{{ item.desc }}"
    state: present
  loop: "{{ execution_enviroments }}"
  when:
    - execution_enviroments is defined

- name: Attach Galaxy Credentials to AAP organizations
  ansible.controller.organization:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    state: present
    galaxy_credentials: "{{ item.creds | default(omit) }}"
  loop: "{{ organizations }}"
  when:
    - organizations is defined

- name: Create Projects
  ansible.controller.project:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    organization: "{{ item.org }}"
    scm_branch: "{{ item.git_branch }}"
    scm_clean: true
    credential: "{{ item.git_cred | default(omit) }}"
    scm_delete_on_update: true
    scm_type: git
    scm_update_on_launch: "{{ item.update_on_launch }}"
    scm_url: "{{ item.git_url }}"
    state: present
    update_project: true
    wait: true
  loop: "{{ controller_projects }}"
  when:
    - controller_projects is defined

- name: Create Inventory Sources
  ansible.controller.inventory_source:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    organization: "{{ item.org }}"
    state: present
    inventory: "{{ item.inventory }}"
    source: "{{ item.source }}"
    source_path: "{{ item.source_path | default(omit) }}"
    source_project: "{{ item.project | default(omit) }}"
    source_vars: "{{ item.vars | default(omit) }}"
    credential: "{{ item.credential | default(omit) }}"
  loop: "{{ inventory_sources }}"
  when:
    - inventory_sources is defined

- name: Create Job Templates
  ansible.controller.job_template:
    name: "{{ item.name }}"
    job_type: "run"
    organization: "{{ item.org }}"
    inventory: "{{ item.inv }}"
    project: "{{ item.project }}"
    playbook: "{{ item.playbook }}"
    credentials: "{{ item.creds }}"
    execution_environment: "{{ item.execution_environment }}"
    extra_vars: "{{ item.extra_vars | default(omit) }}"
    ask_variables_on_launch: "{{ item.ask_variables_on_launch | default(omit) }}"
    ask_limit_on_launch: "{{ item.ask_limit_on_launch | default(omit) }}"
    use_fact_cache: "{{ item.use_fact_cache | default(omit) }}"
    allow_simultaneous: "{{ item.allow_simultaneous | default(omit) }}"
    survey_enabled: "{{ item.survey_enabled | default(omit) }}"
    survey_spec: "{{ item.survey_spec | default(omit) }}"
    limit: "{{ item.limit | default(omit) }}"
    state: present
  loop: "{{ jobtemplates }}"
  when:
    - jobtemplates is defined

- name: Create Workflow Job Templates
  ansible.controller.workflow_job_template:
    name: "{{ item.name }}"
    organization: "{{ item.org }}"
    inventory: "{{ item.inv | default(omit)}}"
    ask_limit_on_launch: "{{ item.ask_limit_on_launch | default(omit) }}"
    ask_variables_on_launch: "{{ item.ask_variables_on_launch | default(omit) }}"
    allow_simultaneous: "{{ item.allow_simultaneous | default(omit) }}"
    schema: "{{ item.steps }}"
    webhook_service: "{{ item.webhook | default(omit) }}"
    survey_enabled: "{{ item.survey_enabled | default(omit) }}"
    survey_spec: "{{ item.survey_spec | default(omit) }}"
    extra_vars: "{{ item.extra_vars | default(omit) }}"
    state: present
  loop: "{{ workflowjobtemplates }}"
  when:
    - workflowjobtemplates is defined

- name: Configure controller access RBAC for users
  ansible.controller.role:
    user: "{{ item.username }}"
    role: >-
      {%- if item.superuser == false and item.auditor == false -%}
      member
      {%- elif item.superuser == true and item.auditor == false -%}
      admin
      {%- elif item.superuser == true and item.auditor == true -%}
      admin
      {%- elif item.superuser == false and item.auditor == true -%}
      auditor
      {%- else -%}
      member
      {%- endif -%}
    organization: "{{ item.organizations }}"
    state: present
  loop: "{{ users }}"
  when:
    - users is defined

- name: Configure controller access RBAC for users
  vars:
    user: "{{ item.0 }}"
    role_entry: "{{ item.1 }}"
  ansible.controller.role:
    user: "{{ user.username }}"
    role: "{{ role_entry.role }}"
    organization: "{{ role_entry.organization | default(omit) }}"
    team: "{{ role_entry.team | default(omit) }}"
    project: "{{ role_entry.project | default(omit) }}"
    inventory: "{{ role_entry.inventory | default(omit) }}"
    credential: "{{ role_entry.credential | default(omit) }}"
    workflow: "{{ role_entry.workflow | default(omit) }}"
    job_template: "{{ role_entry.job_template | default(omit) }}"
  loop: "{{ users | subelements('roles') }}"
  loop_control:
    label: "Assigning {{ role_entry.role }} to {{ user.username }} on {{ role_entry | dict2items() | selectattr('value', 'defined') | list | first }} "
  when:
    - users is defined

